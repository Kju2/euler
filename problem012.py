"""
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five
hundred divisors?
"""

from itertools import count

from prime import Primes


def triangle_numbers():
    """
    >>> tn = triangle_numbers()
    >>> [tn.next(), tn.next(), tn.next(), tn.next(), tn.next()]
    [1, 3, 6, 10, 15]
    """
    return (n * (n + 1) / 2 for n in count(1))


def num_of_divisors_of(number, primes):
    """
    >>> num_of_divisors_of(36, Primes(100))
    9
    >>> num_of_divisors_of(220, Primes(300))
    12
    """
    result = 1
    for value in primes.factors_of(number).viewvalues():
        result *= (value + 1)
    return result


def main():
    """
    >>> main()
    76576500
    """
    primes = Primes(10 ** 6)

    for tn in triangle_numbers():
        if num_of_divisors_of(tn, primes) > 500:
            print(tn)
            break


if __name__ == "__main__":
    import doctest
    doctest.testmod()
